const jwt = require('jsonwebtoken');

// Generate a JWT token for the user
const generateAuthToken = (userId) => {
    const payload = { userId }; // Payload to store in the token (usually user data like ID)
    const secretKey = process.env.JWT_SECRET_KEY || 'BenTen'; // Secret key for signing the token
    const options = { expiresIn: '1h' }; // Token expiration time (1 hour)

    return jwt.sign(payload, secretKey, options); // Sign and return the token
};

// Verify the JWT token (for protected routes)
const verifyAuthToken = (token) => {
    const secretKey = process.env.JWT_SECRET_KEY || 'BenTen'; // Secret key for verifying the token

    try {
        // Verify the token and return the decoded data (userId in this case)
        return jwt.verify(token, secretKey);
    } catch (error) {
        throw new Error('Invalid or expired token'); 
    }
};

// Middleware to protect routes and verify the JWT token from Authorization header
const authMiddleware = (req, res, next) => {
    const token = req.header('Authorization')?.replace('Bearer ', ''); // Extract the token from the header

    if (!token) {
        return res.status(401).json({ message: 'Access denied. No token provided.' });
    }

    try {
        const decoded = verifyAuthToken(token);
        req.user = decoded; 
        next(); 
    } catch (error) {
        res.status(400).json({ message: 'Invalid or expired token.' }); // Handle invalid token
    }
};

module.exports = { generateAuthToken, authMiddleware };
